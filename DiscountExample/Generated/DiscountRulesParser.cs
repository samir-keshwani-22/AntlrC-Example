//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar/DiscountRules.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class DiscountRulesParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, STRING=8, NUMBER=9, 
		WS=10;
	public const int
		RULE_rules = 0, RULE_rule = 1, RULE_condition = 2, RULE_action = 3, RULE_discount = 4;
	public static readonly string[] ruleNames = {
		"rules", "rule", "condition", "action", "discount"
	};

	private static readonly string[] _LiteralNames = {
		null, "'if'", "'then'", "'product'", "'is'", "'apply'", "'%'", "'discount'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "STRING", "NUMBER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DiscountRules.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DiscountRulesParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DiscountRulesParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DiscountRulesParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RulesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuleContext[] rule() {
			return GetRuleContexts<RuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleContext rule(int i) {
			return GetRuleContext<RuleContext>(i);
		}
		public RulesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rules; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiscountRulesListener typedListener = listener as IDiscountRulesListener;
			if (typedListener != null) typedListener.EnterRules(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiscountRulesListener typedListener = listener as IDiscountRulesListener;
			if (typedListener != null) typedListener.ExitRules(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDiscountRulesVisitor<TResult> typedVisitor = visitor as IDiscountRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRules(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulesContext rules() {
		RulesContext _localctx = new RulesContext(Context, State);
		EnterRule(_localctx, 0, RULE_rules);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 10;
				rule();
				}
				}
				State = 13;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public RuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiscountRulesListener typedListener = listener as IDiscountRulesListener;
			if (typedListener != null) typedListener.EnterRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiscountRulesListener typedListener = listener as IDiscountRulesListener;
			if (typedListener != null) typedListener.ExitRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDiscountRulesVisitor<TResult> typedVisitor = visitor as IDiscountRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleContext rule() {
		RuleContext _localctx = new RuleContext(Context, State);
		EnterRule(_localctx, 2, RULE_rule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 15;
			Match(T__0);
			State = 16;
			condition();
			State = 17;
			Match(T__1);
			State = 18;
			action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(DiscountRulesParser.STRING, 0); }
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiscountRulesListener typedListener = listener as IDiscountRulesListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiscountRulesListener typedListener = listener as IDiscountRulesListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDiscountRulesVisitor<TResult> typedVisitor = visitor as IDiscountRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 4, RULE_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20;
			Match(T__2);
			State = 21;
			Match(T__3);
			State = 22;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DiscountContext discount() {
			return GetRuleContext<DiscountContext>(0);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiscountRulesListener typedListener = listener as IDiscountRulesListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiscountRulesListener typedListener = listener as IDiscountRulesListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDiscountRulesVisitor<TResult> typedVisitor = visitor as IDiscountRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 6, RULE_action);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			Match(T__4);
			State = 25;
			discount();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DiscountContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(DiscountRulesParser.NUMBER, 0); }
		public DiscountContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_discount; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiscountRulesListener typedListener = listener as IDiscountRulesListener;
			if (typedListener != null) typedListener.EnterDiscount(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiscountRulesListener typedListener = listener as IDiscountRulesListener;
			if (typedListener != null) typedListener.ExitDiscount(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDiscountRulesVisitor<TResult> typedVisitor = visitor as IDiscountRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiscount(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DiscountContext discount() {
		DiscountContext _localctx = new DiscountContext(Context, State);
		EnterRule(_localctx, 8, RULE_discount);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			Match(NUMBER);
			State = 28;
			Match(T__5);
			State = 29;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,10,32,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,1,0,4,0,12,8,0,11,0,
		12,0,13,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,
		4,1,4,0,0,5,0,2,4,6,8,0,0,27,0,11,1,0,0,0,2,15,1,0,0,0,4,20,1,0,0,0,6,
		24,1,0,0,0,8,27,1,0,0,0,10,12,3,2,1,0,11,10,1,0,0,0,12,13,1,0,0,0,13,11,
		1,0,0,0,13,14,1,0,0,0,14,1,1,0,0,0,15,16,5,1,0,0,16,17,3,4,2,0,17,18,5,
		2,0,0,18,19,3,6,3,0,19,3,1,0,0,0,20,21,5,3,0,0,21,22,5,4,0,0,22,23,5,8,
		0,0,23,5,1,0,0,0,24,25,5,5,0,0,25,26,3,8,4,0,26,7,1,0,0,0,27,28,5,9,0,
		0,28,29,5,6,0,0,29,30,5,7,0,0,30,9,1,0,0,0,1,13
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
