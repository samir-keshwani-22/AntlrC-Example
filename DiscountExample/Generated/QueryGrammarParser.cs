//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar/QueryGrammar.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class QueryGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, QUERY=3, COUNT=4, SUM=5, STAR=6, AMOUNT=7, LPAREN=8, RPAREN=9, 
		WHERE=10, ACCOUNT=11, SOURCE=12, DEST=13, IS=14, AND=15, FROM=16, DATA=17, 
		PAST=18, DAY=19, HOUR=20, BEFORE=21, TRANSACTION_DATE=22, INT=23, WS=24;
	public const int
		RULE_query = 0, RULE_agg_expr_list = 1, RULE_agg_expr = 2, RULE_time_related = 3, 
		RULE_offset = 4, RULE_where_expr = 5, RULE_account_expr = 6, RULE_expression = 7;
	public static readonly string[] ruleNames = {
		"query", "agg_expr_list", "agg_expr", "time_related", "offset", "where_expr", 
		"account_expr", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "'expression'", "'QUERY'", "'COUNT'", "'SUM'", "'*'", "'{amount}'", 
		"'('", "')'", "'WHERE'", "'#{account}'", "'{source}'", "'{dest}'", "'is'", 
		"'AND'", "'FROM'", "'DATA'", "'PAST'", "'day'", "'hour'", "'before'", 
		"'transaction date'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "QUERY", "COUNT", "SUM", "STAR", "AMOUNT", "LPAREN", 
		"RPAREN", "WHERE", "ACCOUNT", "SOURCE", "DEST", "IS", "AND", "FROM", "DATA", 
		"PAST", "DAY", "HOUR", "BEFORE", "TRANSACTION_DATE", "INT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "QueryGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static QueryGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public QueryGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public QueryGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class QueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(QueryGrammarParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Agg_expr_listContext agg_expr_list() {
			return GetRuleContext<Agg_expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(QueryGrammarParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(QueryGrammarParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Time_relatedContext time_related() {
			return GetRuleContext<Time_relatedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(QueryGrammarParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Where_exprContext where_expr() {
			return GetRuleContext<Where_exprContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQueryGrammarListener typedListener = listener as IQueryGrammarListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQueryGrammarListener typedListener = listener as IQueryGrammarListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryGrammarVisitor<TResult> typedVisitor = visitor as IQueryGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 0, RULE_query);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16;
			Match(QUERY);
			State = 17;
			agg_expr_list();
			State = 18;
			Match(FROM);
			State = 19;
			Match(DATA);
			State = 21;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PAST) {
				{
				State = 20;
				time_related();
				}
			}

			State = 25;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 23;
				Match(WHERE);
				State = 24;
				where_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Agg_expr_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Agg_exprContext[] agg_expr() {
			return GetRuleContexts<Agg_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Agg_exprContext agg_expr(int i) {
			return GetRuleContext<Agg_exprContext>(i);
		}
		public Agg_expr_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_agg_expr_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQueryGrammarListener typedListener = listener as IQueryGrammarListener;
			if (typedListener != null) typedListener.EnterAgg_expr_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQueryGrammarListener typedListener = listener as IQueryGrammarListener;
			if (typedListener != null) typedListener.ExitAgg_expr_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryGrammarVisitor<TResult> typedVisitor = visitor as IQueryGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAgg_expr_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Agg_expr_listContext agg_expr_list() {
		Agg_expr_listContext _localctx = new Agg_expr_listContext(Context, State);
		EnterRule(_localctx, 2, RULE_agg_expr_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			agg_expr();
			State = 32;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 28;
				Match(T__0);
				State = 29;
				agg_expr();
				}
				}
				State = 34;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Agg_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT() { return GetToken(QueryGrammarParser.COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(QueryGrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(QueryGrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(QueryGrammarParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMOUNT() { return GetToken(QueryGrammarParser.AMOUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM() { return GetToken(QueryGrammarParser.SUM, 0); }
		public Agg_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_agg_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQueryGrammarListener typedListener = listener as IQueryGrammarListener;
			if (typedListener != null) typedListener.EnterAgg_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQueryGrammarListener typedListener = listener as IQueryGrammarListener;
			if (typedListener != null) typedListener.ExitAgg_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryGrammarVisitor<TResult> typedVisitor = visitor as IQueryGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAgg_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Agg_exprContext agg_expr() {
		Agg_exprContext _localctx = new Agg_exprContext(Context, State);
		EnterRule(_localctx, 4, RULE_agg_expr);
		int _la;
		try {
			State = 43;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COUNT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 35;
				Match(COUNT);
				State = 36;
				Match(LPAREN);
				State = 37;
				_la = TokenStream.LA(1);
				if ( !(_la==STAR || _la==AMOUNT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 38;
				Match(RPAREN);
				}
				break;
			case SUM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 39;
				Match(SUM);
				State = 40;
				Match(LPAREN);
				State = 41;
				Match(AMOUNT);
				State = 42;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Time_relatedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAST() { return GetToken(QueryGrammarParser.PAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(QueryGrammarParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(QueryGrammarParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(QueryGrammarParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION_DATE() { return GetToken(QueryGrammarParser.TRANSACTION_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OffsetContext offset() {
			return GetRuleContext<OffsetContext>(0);
		}
		public Time_relatedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_time_related; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQueryGrammarListener typedListener = listener as IQueryGrammarListener;
			if (typedListener != null) typedListener.EnterTime_related(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQueryGrammarListener typedListener = listener as IQueryGrammarListener;
			if (typedListener != null) typedListener.ExitTime_related(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryGrammarVisitor<TResult> typedVisitor = visitor as IQueryGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTime_related(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Time_relatedContext time_related() {
		Time_relatedContext _localctx = new Time_relatedContext(Context, State);
		EnterRule(_localctx, 6, RULE_time_related);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			Match(PAST);
			State = 46;
			Match(INT);
			State = 47;
			Match(DAY);
			State = 48;
			Match(FROM);
			State = 50;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INT) {
				{
				State = 49;
				offset();
				}
			}

			State = 52;
			Match(TRANSACTION_DATE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OffsetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(QueryGrammarParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR() { return GetToken(QueryGrammarParser.HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(QueryGrammarParser.BEFORE, 0); }
		public OffsetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_offset; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQueryGrammarListener typedListener = listener as IQueryGrammarListener;
			if (typedListener != null) typedListener.EnterOffset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQueryGrammarListener typedListener = listener as IQueryGrammarListener;
			if (typedListener != null) typedListener.ExitOffset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryGrammarVisitor<TResult> typedVisitor = visitor as IQueryGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOffset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OffsetContext offset() {
		OffsetContext _localctx = new OffsetContext(Context, State);
		EnterRule(_localctx, 8, RULE_offset);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			Match(INT);
			State = 55;
			Match(HOUR);
			State = 56;
			Match(BEFORE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Account_exprContext account_expr() {
			return GetRuleContext<Account_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(QueryGrammarParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Where_exprContext where_expr() {
			return GetRuleContext<Where_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Where_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQueryGrammarListener typedListener = listener as IQueryGrammarListener;
			if (typedListener != null) typedListener.EnterWhere_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQueryGrammarListener typedListener = listener as IQueryGrammarListener;
			if (typedListener != null) typedListener.ExitWhere_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryGrammarVisitor<TResult> typedVisitor = visitor as IQueryGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Where_exprContext where_expr() {
		Where_exprContext _localctx = new Where_exprContext(Context, State);
		EnterRule(_localctx, 10, RULE_where_expr);
		int _la;
		try {
			State = 64;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACCOUNT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 58;
				account_expr();
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AND) {
					{
					State = 59;
					Match(AND);
					State = 60;
					where_expr();
					}
				}

				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 63;
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Account_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCOUNT() { return GetToken(QueryGrammarParser.ACCOUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(QueryGrammarParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE() { return GetToken(QueryGrammarParser.SOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEST() { return GetToken(QueryGrammarParser.DEST, 0); }
		public Account_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_account_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQueryGrammarListener typedListener = listener as IQueryGrammarListener;
			if (typedListener != null) typedListener.EnterAccount_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQueryGrammarListener typedListener = listener as IQueryGrammarListener;
			if (typedListener != null) typedListener.ExitAccount_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryGrammarVisitor<TResult> typedVisitor = visitor as IQueryGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccount_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Account_exprContext account_expr() {
		Account_exprContext _localctx = new Account_exprContext(Context, State);
		EnterRule(_localctx, 12, RULE_account_expr);
		try {
			State = 72;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 66;
				Match(ACCOUNT);
				State = 67;
				Match(IS);
				State = 68;
				Match(SOURCE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 69;
				Match(ACCOUNT);
				State = 70;
				Match(IS);
				State = 71;
				Match(DEST);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQueryGrammarListener typedListener = listener as IQueryGrammarListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQueryGrammarListener typedListener = listener as IQueryGrammarListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryGrammarVisitor<TResult> typedVisitor = visitor as IQueryGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 14, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,24,77,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,1,0,1,0,1,0,1,0,1,0,3,0,22,8,0,1,0,1,0,3,0,26,8,0,1,1,1,1,1,1,5,1,
		31,8,1,10,1,12,1,34,9,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,44,8,2,1,3,
		1,3,1,3,1,3,1,3,3,3,51,8,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,3,5,62,
		8,5,1,5,3,5,65,8,5,1,6,1,6,1,6,1,6,1,6,1,6,3,6,73,8,6,1,7,1,7,1,7,0,0,
		8,0,2,4,6,8,10,12,14,0,1,1,0,6,7,76,0,16,1,0,0,0,2,27,1,0,0,0,4,43,1,0,
		0,0,6,45,1,0,0,0,8,54,1,0,0,0,10,64,1,0,0,0,12,72,1,0,0,0,14,74,1,0,0,
		0,16,17,5,3,0,0,17,18,3,2,1,0,18,19,5,16,0,0,19,21,5,17,0,0,20,22,3,6,
		3,0,21,20,1,0,0,0,21,22,1,0,0,0,22,25,1,0,0,0,23,24,5,10,0,0,24,26,3,10,
		5,0,25,23,1,0,0,0,25,26,1,0,0,0,26,1,1,0,0,0,27,32,3,4,2,0,28,29,5,1,0,
		0,29,31,3,4,2,0,30,28,1,0,0,0,31,34,1,0,0,0,32,30,1,0,0,0,32,33,1,0,0,
		0,33,3,1,0,0,0,34,32,1,0,0,0,35,36,5,4,0,0,36,37,5,8,0,0,37,38,7,0,0,0,
		38,44,5,9,0,0,39,40,5,5,0,0,40,41,5,8,0,0,41,42,5,7,0,0,42,44,5,9,0,0,
		43,35,1,0,0,0,43,39,1,0,0,0,44,5,1,0,0,0,45,46,5,18,0,0,46,47,5,23,0,0,
		47,48,5,19,0,0,48,50,5,16,0,0,49,51,3,8,4,0,50,49,1,0,0,0,50,51,1,0,0,
		0,51,52,1,0,0,0,52,53,5,22,0,0,53,7,1,0,0,0,54,55,5,23,0,0,55,56,5,20,
		0,0,56,57,5,21,0,0,57,9,1,0,0,0,58,61,3,12,6,0,59,60,5,15,0,0,60,62,3,
		10,5,0,61,59,1,0,0,0,61,62,1,0,0,0,62,65,1,0,0,0,63,65,3,14,7,0,64,58,
		1,0,0,0,64,63,1,0,0,0,65,11,1,0,0,0,66,67,5,11,0,0,67,68,5,14,0,0,68,73,
		5,12,0,0,69,70,5,11,0,0,70,71,5,14,0,0,71,73,5,13,0,0,72,66,1,0,0,0,72,
		69,1,0,0,0,73,13,1,0,0,0,74,75,5,2,0,0,75,15,1,0,0,0,8,21,25,32,43,50,
		61,64,72
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
