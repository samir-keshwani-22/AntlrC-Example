//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar/PseudoQueryExpression.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class PseudoQueryExpressionParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, STAR=28, DATE=29, IDENTIFIER=30, VALUEIDENTIFIER=31, 
		EMPTY=32, INT=33, WS=34;
	public const int
		RULE_start = 0, RULE_query = 1, RULE_aggregateQuery = 2, RULE_aggregateList = 3, 
		RULE_aggregate = 4, RULE_timeFilter = 5, RULE_timeReference = 6, RULE_whereClause = 7, 
		RULE_preExpression = 8, RULE_expression = 9, RULE_term = 10, RULE_field = 11, 
		RULE_operator = 12, RULE_value = 13, RULE_logical_operator = 14;
	public static readonly string[] ruleNames = {
		"start", "query", "aggregateQuery", "aggregateList", "aggregate", "timeFilter", 
		"timeReference", "whereClause", "preExpression", "expression", "term", 
		"field", "operator", "value", "logical_operator"
	};

	private static readonly string[] _LiteralNames = {
		null, "'QUERY'", "'FROM'", "'DATA'", "','", "'COUNT'", "'SUM'", "'('", 
		"')'", "'PAST'", "'day'", "'transaction date'", "'hour'", "'before'", 
		"'WHERE'", "'is'", "'{source}'", "'{dest}'", "'AND'", "'='", "'!='", "'>'", 
		"'<'", "'>='", "'<='", "'in'", "'not in'", "'OR'", "'*'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "STAR", "DATE", "IDENTIFIER", "VALUEIDENTIFIER", 
		"EMPTY", "INT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PseudoQueryExpression.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PseudoQueryExpressionParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PseudoQueryExpressionParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PseudoQueryExpressionParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PseudoQueryExpressionParser.Eof, 0); }
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoQueryExpressionVisitor<TResult> typedVisitor = visitor as IPseudoQueryExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30;
			query();
			State = 31;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AggregateQueryContext aggregateQuery() {
			return GetRuleContext<AggregateQueryContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoQueryExpressionVisitor<TResult> typedVisitor = visitor as IPseudoQueryExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 2, RULE_query);
		try {
			State = 35;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__6:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 33;
				expression();
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 2);
				{
				State = 34;
				aggregateQuery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggregateQueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AggregateListContext aggregateList() {
			return GetRuleContext<AggregateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimeFilterContext timeFilter() {
			return GetRuleContext<TimeFilterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public AggregateQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregateQuery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.EnterAggregateQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.ExitAggregateQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoQueryExpressionVisitor<TResult> typedVisitor = visitor as IPseudoQueryExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregateQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AggregateQueryContext aggregateQuery() {
		AggregateQueryContext _localctx = new AggregateQueryContext(Context, State);
		EnterRule(_localctx, 4, RULE_aggregateQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			Match(T__0);
			State = 38;
			aggregateList();
			State = 39;
			Match(T__1);
			State = 40;
			Match(T__2);
			State = 42;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 41;
				timeFilter();
				}
			}

			State = 45;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13) {
				{
				State = 44;
				whereClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggregateListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AggregateContext[] aggregate() {
			return GetRuleContexts<AggregateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AggregateContext aggregate(int i) {
			return GetRuleContext<AggregateContext>(i);
		}
		public AggregateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregateList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.EnterAggregateList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.ExitAggregateList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoQueryExpressionVisitor<TResult> typedVisitor = visitor as IPseudoQueryExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregateList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AggregateListContext aggregateList() {
		AggregateListContext _localctx = new AggregateListContext(Context, State);
		EnterRule(_localctx, 6, RULE_aggregateList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			aggregate();
			State = 52;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 48;
				Match(T__3);
				State = 49;
				aggregate();
				}
				}
				State = 54;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggregateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUEIDENTIFIER() { return GetToken(PseudoQueryExpressionParser.VALUEIDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PseudoQueryExpressionParser.STAR, 0); }
		public AggregateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.EnterAggregate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.ExitAggregate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoQueryExpressionVisitor<TResult> typedVisitor = visitor as IPseudoQueryExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AggregateContext aggregate() {
		AggregateContext _localctx = new AggregateContext(Context, State);
		EnterRule(_localctx, 8, RULE_aggregate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			_la = TokenStream.LA(1);
			if ( !(_la==T__4 || _la==T__5) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 56;
			Match(T__6);
			State = 57;
			_la = TokenStream.LA(1);
			if ( !(_la==STAR || _la==VALUEIDENTIFIER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 58;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeFilterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(PseudoQueryExpressionParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TimeReferenceContext timeReference() {
			return GetRuleContext<TimeReferenceContext>(0);
		}
		public TimeFilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeFilter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.EnterTimeFilter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.ExitTimeFilter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoQueryExpressionVisitor<TResult> typedVisitor = visitor as IPseudoQueryExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeFilter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeFilterContext timeFilter() {
		TimeFilterContext _localctx = new TimeFilterContext(Context, State);
		EnterRule(_localctx, 10, RULE_timeFilter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			Match(T__8);
			State = 61;
			Match(INT);
			State = 62;
			Match(T__9);
			State = 63;
			Match(T__1);
			State = 64;
			timeReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(PseudoQueryExpressionParser.INT, 0); }
		public TimeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.EnterTimeReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.ExitTimeReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoQueryExpressionVisitor<TResult> typedVisitor = visitor as IPseudoQueryExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeReferenceContext timeReference() {
		TimeReferenceContext _localctx = new TimeReferenceContext(Context, State);
		EnterRule(_localctx, 12, RULE_timeReference);
		try {
			State = 71;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__10:
				EnterOuterAlt(_localctx, 1);
				{
				State = 66;
				Match(T__10);
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 67;
				Match(INT);
				State = 68;
				Match(T__11);
				State = 69;
				Match(T__12);
				State = 70;
				Match(T__10);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreExpressionContext preExpression() {
			return GetRuleContext<PreExpressionContext>(0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.EnterWhereClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.ExitWhereClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoQueryExpressionVisitor<TResult> typedVisitor = visitor as IPseudoQueryExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhereClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereClauseContext whereClause() {
		WhereClauseContext _localctx = new WhereClauseContext(Context, State);
		EnterRule(_localctx, 14, RULE_whereClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			Match(T__13);
			State = 75;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 74;
				preExpression();
				}
				break;
			}
			State = 77;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(PseudoQueryExpressionParser.IDENTIFIER, 0); }
		public PreExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.EnterPreExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.ExitPreExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoQueryExpressionVisitor<TResult> typedVisitor = visitor as IPseudoQueryExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreExpressionContext preExpression() {
		PreExpressionContext _localctx = new PreExpressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_preExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			Match(IDENTIFIER);
			State = 80;
			Match(T__14);
			State = 81;
			_la = TokenStream.LA(1);
			if ( !(_la==T__15 || _la==T__16) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 82;
			Match(T__17);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_operatorContext[] logical_operator() {
			return GetRuleContexts<Logical_operatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_operatorContext logical_operator(int i) {
			return GetRuleContext<Logical_operatorContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoQueryExpressionVisitor<TResult> typedVisitor = visitor as IPseudoQueryExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			term();
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__17 || _la==T__26) {
				{
				{
				State = 85;
				logical_operator();
				State = 86;
				term();
				}
				}
				State = 92;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoQueryExpressionVisitor<TResult> typedVisitor = visitor as IPseudoQueryExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 20, RULE_term);
		try {
			State = 101;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__6:
				EnterOuterAlt(_localctx, 1);
				{
				State = 93;
				Match(T__6);
				State = 94;
				expression();
				State = 95;
				Match(T__7);
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 97;
				field();
				State = 98;
				@operator();
				State = 99;
				value();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(PseudoQueryExpressionParser.IDENTIFIER, 0); }
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoQueryExpressionVisitor<TResult> typedVisitor = visitor as IPseudoQueryExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 22, RULE_field);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoQueryExpressionVisitor<TResult> typedVisitor = visitor as IPseudoQueryExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 24, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 133693440L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUEIDENTIFIER() { return GetToken(PseudoQueryExpressionParser.VALUEIDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(PseudoQueryExpressionParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY() { return GetToken(PseudoQueryExpressionParser.EMPTY, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoQueryExpressionVisitor<TResult> typedVisitor = visitor as IPseudoQueryExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 26, RULE_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 6979321856L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_operatorContext : ParserRuleContext {
		public Logical_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.EnterLogical_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPseudoQueryExpressionListener typedListener = listener as IPseudoQueryExpressionListener;
			if (typedListener != null) typedListener.ExitLogical_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPseudoQueryExpressionVisitor<TResult> typedVisitor = visitor as IPseudoQueryExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_operatorContext logical_operator() {
		Logical_operatorContext _localctx = new Logical_operatorContext(Context, State);
		EnterRule(_localctx, 28, RULE_logical_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			_la = TokenStream.LA(1);
			if ( !(_la==T__17 || _la==T__26) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,34,112,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		1,0,1,0,1,0,1,1,1,1,3,1,36,8,1,1,2,1,2,1,2,1,2,1,2,3,2,43,8,2,1,2,3,2,
		46,8,2,1,3,1,3,1,3,5,3,51,8,3,10,3,12,3,54,9,3,1,4,1,4,1,4,1,4,1,4,1,5,
		1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,3,6,72,8,6,1,7,1,7,3,7,76,8,7,
		1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,5,9,89,8,9,10,9,12,9,92,9,
		9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,102,8,10,1,11,1,11,1,12,
		1,12,1,13,1,13,1,14,1,14,1,14,0,0,15,0,2,4,6,8,10,12,14,16,18,20,22,24,
		26,28,0,6,1,0,5,6,2,0,28,28,31,31,1,0,16,17,1,0,19,26,2,0,29,29,31,32,
		2,0,18,18,27,27,104,0,30,1,0,0,0,2,35,1,0,0,0,4,37,1,0,0,0,6,47,1,0,0,
		0,8,55,1,0,0,0,10,60,1,0,0,0,12,71,1,0,0,0,14,73,1,0,0,0,16,79,1,0,0,0,
		18,84,1,0,0,0,20,101,1,0,0,0,22,103,1,0,0,0,24,105,1,0,0,0,26,107,1,0,
		0,0,28,109,1,0,0,0,30,31,3,2,1,0,31,32,5,0,0,1,32,1,1,0,0,0,33,36,3,18,
		9,0,34,36,3,4,2,0,35,33,1,0,0,0,35,34,1,0,0,0,36,3,1,0,0,0,37,38,5,1,0,
		0,38,39,3,6,3,0,39,40,5,2,0,0,40,42,5,3,0,0,41,43,3,10,5,0,42,41,1,0,0,
		0,42,43,1,0,0,0,43,45,1,0,0,0,44,46,3,14,7,0,45,44,1,0,0,0,45,46,1,0,0,
		0,46,5,1,0,0,0,47,52,3,8,4,0,48,49,5,4,0,0,49,51,3,8,4,0,50,48,1,0,0,0,
		51,54,1,0,0,0,52,50,1,0,0,0,52,53,1,0,0,0,53,7,1,0,0,0,54,52,1,0,0,0,55,
		56,7,0,0,0,56,57,5,7,0,0,57,58,7,1,0,0,58,59,5,8,0,0,59,9,1,0,0,0,60,61,
		5,9,0,0,61,62,5,33,0,0,62,63,5,10,0,0,63,64,5,2,0,0,64,65,3,12,6,0,65,
		11,1,0,0,0,66,72,5,11,0,0,67,68,5,33,0,0,68,69,5,12,0,0,69,70,5,13,0,0,
		70,72,5,11,0,0,71,66,1,0,0,0,71,67,1,0,0,0,72,13,1,0,0,0,73,75,5,14,0,
		0,74,76,3,16,8,0,75,74,1,0,0,0,75,76,1,0,0,0,76,77,1,0,0,0,77,78,3,18,
		9,0,78,15,1,0,0,0,79,80,5,30,0,0,80,81,5,15,0,0,81,82,7,2,0,0,82,83,5,
		18,0,0,83,17,1,0,0,0,84,90,3,20,10,0,85,86,3,28,14,0,86,87,3,20,10,0,87,
		89,1,0,0,0,88,85,1,0,0,0,89,92,1,0,0,0,90,88,1,0,0,0,90,91,1,0,0,0,91,
		19,1,0,0,0,92,90,1,0,0,0,93,94,5,7,0,0,94,95,3,18,9,0,95,96,5,8,0,0,96,
		102,1,0,0,0,97,98,3,22,11,0,98,99,3,24,12,0,99,100,3,26,13,0,100,102,1,
		0,0,0,101,93,1,0,0,0,101,97,1,0,0,0,102,21,1,0,0,0,103,104,5,30,0,0,104,
		23,1,0,0,0,105,106,7,3,0,0,106,25,1,0,0,0,107,108,7,4,0,0,108,27,1,0,0,
		0,109,110,7,5,0,0,110,29,1,0,0,0,8,35,42,45,52,71,75,90,101
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
